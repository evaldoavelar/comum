unit TestDaoQuery;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Model.CampoValor, Dao.IConection, Exceptions, Model.Atributos,
  Data.DB, Dao.IResultAdapter, System.SysUtils, System.Generics.Collections,
  System.StrUtils, System.Variants, Dao.DataSet, Dao.IQueryBuilder, Model.IModelBase,
  Model.ModelBase, Dao.Base,
  Model.Atributos.Funcoes, Dao.Query, Log.ILog, Dao.ResultAdapter, Winapi.Windows,
  SQLBuilder4D, System.Rtti, Dao.TQueryBuilder, Test.Model.Produto;

type
  // Test methods for class TDaoQuery

  TestTDaoQuery = class(TTestCase)
  strict private
    FDaoQuery: TDaoQuery;
    FModels: TObjectList<TProduto>;
    FDaoBase: TDaoBase;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestOpenQuery;
    procedure TestOpenQueryComParametros;
    procedure TestExec;
  end;

implementation

uses
  Dao.Conection.Firedac, Dao.Conection.Parametros, Database.SGDB, Seed, System.Classes;

procedure TestTDaoQuery.SetUp;
var
  conexao: TFiredacConection;
  I: Integer;
  Produto: TProduto;

begin
  conexao := TFiredacConection.Create(
    TConectionParametros.Create(
    tpSqlServer,
    'LOCALHOST',
    'testeComum',
    'rm',
    'rm',
    'Teste',
    0
    )
    );

  FDaoQuery := TDaoQuery.Create(conexao);
  FDaoBase := TDaoBase.Create(conexao, nil);
  FModels := TObjectList<TProduto>.Create;

  for I := 0 to 10 do
  begin
    Produto := TSeed.ProdutoTeste();

    // teste
    FDaoBase.Insert<TProduto>(Produto);
    FModels.Add(Produto)
  end;

end;

procedure TestTDaoQuery.TearDown;
var
  I: Integer;
begin

  for I := 0 to FModels.Count - 1 do
  begin
    FDaoBase.delete<TProduto>(FModels[I]);
  end;

  FModels.Free;
  FDaoBase.Free;
  FDaoQuery.Free;
  FDaoQuery := nil;
end;

procedure TestTDaoQuery.TestExec;
begin
  FDaoQuery.Clear;
  FDaoQuery.SQL.Add('update ');
  FDaoQuery.SQL.Add('PRODUTO ');
  FDaoQuery.SQL.Add('set descricao = :DESCRICAO ');
  FDaoQuery.SQL.Add('where codigo = :CODIGO');
  FDaoQuery.Parameters.Add('CODIGO', FModels[0].CODIGO);
  FDaoQuery.Parameters.Add('DESCRICAO', 'ALTERADO');
  FDaoQuery.Exec;

  FDaoQuery.Clear;
  FDaoQuery.SQL.Add('select  * ');
  FDaoQuery.SQL.Add('from PRODUTO ');
  FDaoQuery.SQL.Add('where CODIGO = :CODIGO');
  FDaoQuery.Parameters.Add('CODIGO', FModels[0].CODIGO);
  FDaoQuery.Open;

  CheckFalse(FDaoQuery.IsEmpty);
  CheckEquals(FModels[0].CODIGO, FDaoQuery.FieldByName('CODIGO').AsString);
  CheckEquals('ALTERADO', FDaoQuery.FieldByName('DESCRICAO').AsString);
  CheckNotEquals(FModels[0].DESCRICAO, FDaoQuery.FieldByName('DESCRICAO').AsString);

end;

procedure TestTDaoQuery.TestOpenQuery;
var
  Count: Integer;
begin
  FDaoQuery.Clear;
  FDaoQuery.SQL.Add('select  * ');
  FDaoQuery.SQL.Add('from PRODUTO');
  FDaoQuery.Open;
  FDaoQuery.First;

  CheckFalse(FDaoQuery.IsEmpty);
  Count := 0;

  while not FDaoQuery.Eof do
  begin
    Inc(Count);
    FDaoQuery.Next;
  end;

  CheckEquals(Count, FDaoQuery.RecordCount);
end;

procedure TestTDaoQuery.TestOpenQueryComParametros;
begin
  FDaoQuery.Clear;
  FDaoQuery.SQL.Add('select  * ');
  FDaoQuery.SQL.Add('from PRODUTO ');
  FDaoQuery.SQL.Add('where CODIGO = :CODIGO');
  FDaoQuery.Parameters.Add('CODIGO', FModels[0].CODIGO);
  FDaoQuery.Open;
  FDaoQuery.First;

  CheckFalse(FDaoQuery.IsEmpty);
  CheckEquals(FModels[0].CODIGO, FDaoQuery.FieldByName('CODIGO').AsString);
  CheckEquals(FModels[0].BARRAS, FDaoQuery.FieldByName('BARRAS').AsString);
  CheckEquals(FModels[0].DESCRICAO, FDaoQuery.FieldByName('DESCRICAO').AsString);
  CheckEquals(FModels[0].PRECO_VENDA, FDaoQuery.FieldByName('PRECO_VENDA').AsCurrency);
  CheckEquals(FModels[0].DATA_CADASTRO, FDaoQuery.FieldByName('DATA_CADASTRO').AsDateTime);
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTDaoQuery.Suite);

end.
